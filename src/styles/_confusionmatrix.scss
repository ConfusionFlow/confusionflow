@import "vars";
@import '~font-awesome/scss/variables';
@import '~font-awesome/scss/mixins';

@mixin rotateSpanLabel() {
  > span {
    display: block;
    transform: rotate(-180deg);
    writing-mode: vertical-lr;
    white-space: nowrap;
  }
}

.grid {
  display: grid;
  grid-template-areas:
    ". . axis-top . ."
    ". . label-top . label-right"
    "axis-left label-left matrix . chart-right"
    ". . . . ."
    ". label-bottom chart-bottom . chart-bottom-right";
  grid-template-columns: 20px 45px 10fr 10px 1fr;
  grid-template-rows: 20px 45px 10fr 10px 1fr;
}

/*
  Create multiple grid classes with different fractions for the matrix area.

  Reason: Using the calc() function with fraction (fr) and CSS custom properties does not work!
  ```
  grid-template-columns: 20px 45px calc(1fr * var(--matrix-size)) 10px calc(1fr * var(--num-right-columns));
  grid-template-rows: 20px 45px calc(1fr * var(--matrix-size)) 10px calc(1fr * var(--num-bottom-columns));
  ```
 */
@for $i from 1 through 10 {
  .grid-#{$i} {
    grid-template-columns: 20px 45px (1fr*$i) 10px 1fr;
    grid-template-rows: 20px 45px (1fr*$i) 10px 1fr;
  }
}

.malevo-label {
  font-weight: 500;
  font-size: 16px;
}

.cfm-axis {
  background: $label-bg;
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  color: darken($label-border, 10%);

  &.axis-top {
    grid-area: axis-top;
    border-bottom: 1px solid lighten($label-border, 5%);
    padding-left: 10px;
    justify-content: space-between;
  }

  &.axis-left {
    grid-area: axis-left;
    border-right: 1px solid lighten($label-border, 5%);
    padding-top: 10px;

    @include rotateSpanLabel();
  }

  .dropdown {
    a {
      color: darken($label-border, 10%);

      &:active,
      &:hover,
      &:focus {
        color: black;
      }
    }

    .form-footer {
      margin-left: 10px;
      margin-bottom: 10px;
    }

    .checkbox {
      margin: 0;
    }

    label {
      display: block;
      color: darken($label-border, 30%);
      padding: 5px 30px;

      &:focus-within,
      &:hover {
        color: black;
        background-color: lighten($label-border, 10%);
      }
    }

    .checkbox.select-all,
    .form-group {
      border-bottom: 1px solid lighten($label-border, 5%);
    }
  }
}

.chart-bottom-right {
  grid-area: chart-bottom-right;
  position: relative;
  display: grid;
  grid-template-columns: repeat(var(--num-right-columns), 1fr);
}

.label-right {
  grid-area: label-right;
  background: $label-bg;
  grid-template-columns: repeat(var(--num-right-columns), 1fr);
  display: grid;

  div {
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
}

.label-bottom {
  grid-area: label-bottom;
  background: $label-bg;
  display: flex;
  align-items: center;
  justify-content: center;

  @include rotateSpanLabel();
}

.label-top {
  grid-area: label-top;
  position: relative;
  display: grid;
  grid-template-rows: repeat(auto-fill, minmax(100%, 1fr));
}

.label-left {
  grid-area: label-left;
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));

  .label-cell {
    @include rotateSpanLabel();
  }
}

.chart-right {
  grid-area: chart-right;
  position: relative;
  display: grid;
  grid-template-columns: repeat(var(--num-right-columns), 1fr);
}

.chart-bottom {
  grid-area: chart-bottom;
  position: relative;
  display: grid;
  grid-template-rows: repeat(var(--num-bottom-columns), 1fr);
}

.matrix-wrapper {
  grid-area: matrix;
}

.matrix {
  display: grid;
  grid-template-columns: repeat(var(--matrix-size), 1fr);
  grid-template-rows: repeat(var(--matrix-size), 1fr);
}

.labels,
.chart {
  display: grid;

  .bar-tooltip rect {
    opacity: 0.5;
  }
}

.label-left > .labels,
.chart-right > .chart {
  grid-template-rows: repeat(var(--matrix-size), 1fr);
}

.label-top > .labels,
.chart-bottom > .chart {
  grid-template-columns: repeat(var(--matrix-size), 1fr);
}

.cell {
  position: relative;
  border: 1px solid #fff;
  display: flex;
  flex-direction: column;

  &.label-cell {
    align-items: center;
    justify-content: center;
    background-color: $label-bg;
  }

  > svg {
    position: absolute;
    height: 100%;
    width: 100%;
  }

  > .heat-cell {
    flex: 1;
    align-items: center;
    justify-content: center;
    display: flex;
  }
}

.chart-bottom-right,
.chart-right,
.chart-bottom,
.matrix {
  .cell {

    // use pseudo element to create matrix grid
    &::before {
      content: '';
      position: absolute;
      top: -1px;
      bottom: -1px;
      right: -1px;
      left: -1px;
      outline: 1px solid #ccc;
    }

    &:not(.label-cell) {

      &.selected,
      &:active,
      &:focus,
      &:hover {
        &::before {
          top: 0;
          bottom: 0;
          right: 0;
          left: 0;
          outline: 2px solid $select-color;
        }

        cursor: pointer;
        z-index: 1;
      }
    }
  }
}

.transpose-cells .matrix .cell {
  flex-direction: row;
}

.dashed-lines {
  stroke: $select-color;
  stroke-width: 2;
  stroke-dasharray: 1, 1;
}
